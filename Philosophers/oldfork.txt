void	unlock_forks(t_philo *ph)
{
	int	locker_left;
	int	locker_right;
	
	locker_right = m_get_int(ph->table, &ph->table->philo_m, &ph->fork.locker);
	locker_left = m_get_int(ph->table, &ph->table->philo_m, &ph->left->fork.locker);
	if (m_get_bool(ph->table, &ph->table->philo_m, &ph->fork.locked) == true && locker_right == ph->ph_id)
		handle_mutex(ph, &ph->fork.fork_m, UNLOCK);
	if (m_get_bool(ph->table, &ph->table->philo_m, &ph->left->fork.locked) == true && locker_left == ph->ph_id)
		handle_mutex(ph, &ph->left->fork.fork_m, UNLOCK);
}

void	odd_philos(t_philo *ph)
{
	while (!sim_end(ph) && left_fork(ph) && right_fork(ph))
	{
		mutex_eat(ph);
		handle_mutex(ph, &ph->left->fork.fork_m, UNLOCK);
		handle_mutex(ph, &ph->fork.fork_m, UNLOCK);
		// m_set_bool(ph->table, &ph->table->philo_m, &ph->fork.locked, false);
		// m_set_bool(ph->table, &ph->table->philo_m, &ph->left->fork.locked, false);
		// m_set_int(ph->table, &ph->table->philo_m, &ph->fork.locker, 0);
		// m_set_int(ph->table, &ph->table->philo_m, &ph->left->fork.locker, 0);
		mutex_sleep(ph);
		usleep(ph->table->t_sleep * 1000);
		mutex_think(ph);
	}
	//unlock_forks(ph);
}

void	even_philos(t_philo *ph)
{
	while (!sim_end(ph) && right_fork(ph) && left_fork(ph))
	{
		mutex_eat(ph);
		handle_mutex(ph, &ph->fork.fork_m, UNLOCK);
		handle_mutex(ph, &ph->left->fork.fork_m, UNLOCK);
		// m_set_bool(ph->table, &ph->table->philo_m, &ph->fork.locked, false);
		// m_set_bool(ph->table, &ph->table->philo_m, &ph->left->fork.locked, false);
		// m_set_int(ph->table, &ph->table->philo_m, &ph->fork.locker, 0);
		// m_set_int(ph->table, &ph->table->philo_m, &ph->left->fork.locker, 0);
		mutex_sleep(ph);
		usleep(ph->table->t_sleep * 1000);
		mutex_think(ph);
	}
	//unlock_forks(ph);
}

// int	left_fork(t_philo *ph)
// {
// 	if(!sim_end(ph))
// 	{	
// 		handle_mutex(ph, &ph->left->fork.fork_m, LOCK);
// 		m_set_bool(ph->table, &ph->table->philo_m, &ph->left->fork.locked, true);
// 		m_set_int(ph->table, &ph->table->philo_m, &ph->left->fork.locker, ph->ph_id);
// 		handle_mutex(ph, &ph->table->print_m, LOCK);
// 		if (sim_end(ph))
// 		{
// 			handle_mutex(ph, &ph->table->print_m, UNLOCK);
// 			handle_mutex(ph, &ph->left->fork.fork_m, UNLOCK);
// 			m_set_int(ph->table, &ph->table->philo_m, &ph->left->fork.locker, 0);
// 			m_set_bool(ph->table, &ph->table->philo_m, &ph->left->fork.locked, false);
// 			return (0);
// 		}
// 		printf("%ld %d has taken a fork\n", write_time('m') 
// 				- ph->table->simulation_start, ph->ph_id);
// 		handle_mutex(ph, &ph->table->print_m, UNLOCK);
// 		return (1);
// 	}
// 	return (0);
// }

// int	right_fork(t_philo *ph)
// {
// 	if(!sim_end(ph))
// 	{	
// 		handle_mutex(ph, &ph->fork.fork_m, LOCK);
// 		m_set_bool(ph->table, &ph->table->philo_m, &ph->fork.locked, true);
// 		m_set_int(ph->table, &ph->table->philo_m, &ph->fork.locker, ph->ph_id);
// 		handle_mutex(ph, &ph->table->print_m, LOCK);
// 		if (sim_end(ph))
// 		{
// 			handle_mutex(ph, &ph->table->print_m, UNLOCK);
// 			handle_mutex(ph, &ph->fork.fork_m, UNLOCK);
// 			m_set_int(ph->table, &ph->table->philo_m, &ph->fork.locker, 0);
// 			m_set_bool(ph->table, &ph->table->philo_m, &ph->fork.locked, false);
// 			return (0);
// 		}
// 		printf("%ld %d has taken a fork\n", write_time('m') 
// 				- ph->table->simulation_start, ph->ph_id);
// 		handle_mutex(ph, &ph->table->print_m, UNLOCK);
// 		return (1);
// 	}
// 	return (0);
// }




struct utensils {
	bool	locked;
	int	locker;
	pthread_mutex_t	fork_m;
};
typedef struct utensils	t_fork;